generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

enum MeasureUnit {
  UNID
  KG
  L
}

enum PriceLogic {
  SUM
  MAX
}

model Provider {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  products    Product[]
  ingredients Ingredient[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Category {
  id        Int        @id @default(autoincrement())
  name      String
  parentId  Int?
  parent    Category?  @relation("CategoryToSelf", fields: [parentId], references: [id], onDelete: Cascade)
  children  Category[] @relation("CategoryToSelf")

  productsLevel1 Product[] @relation("CategoryLevel1")
  productsLevel2 Product[] @relation("CategoryLevel2")

  @@unique([parentId, name])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id             Int      @id @default(autoincrement())
  externalSource String   @default("fudo")
  externalId     BigInt
  code           String?
  name           String
  description    String?
  price          Decimal  @db.Decimal(14, 2)
  cost           Decimal? @db.Decimal(14, 2)
  isActive       Boolean  @default(true)
  isFavorite     Boolean  @default(false)
  trackStock     Boolean  @default(false)
  sellableAlone  Boolean  @default(true)
  sortWeight     Int?

  providerId Int?
  provider   Provider? @relation(fields: [providerId], references: [id])

  categoryId    Int?
  category      Category? @relation("CategoryLevel1", fields: [categoryId], references: [id])
  subcategoryId Int?
  subcategory   Category? @relation("CategoryLevel2", fields: [subcategoryId], references: [id])

  modifierItems  ModifierGroupItem[]
  modifierGroups ProductModifierGroup[]

  bom   ProductIngredient[]
  image ProductImage?

  @@unique([externalSource, externalId])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Ingredient {
  id             Int         @id @default(autoincrement())
  externalSource String      @default("fudo")
  externalId     BigInt
  name           String
  unit           MeasureUnit
  trackStock     Boolean     @default(false)
  providerId     Int?
  provider       Provider?   @relation(fields: [providerId], references: [id])

  products ProductIngredient[]

  @@unique([externalSource, externalId])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductIngredient {
  productId    Int
  ingredientId Int
  qty          Decimal @db.Decimal(12, 4)

  product    Product    @relation(fields: [productId], references: [id], onDelete: Cascade)
  ingredient Ingredient @relation(fields: [ingredientId], references: [id], onDelete: Cascade)

  @@id([productId, ingredientId])
}

model ModifierGroup {
  id         Int        @id @default(autoincrement())
  name       String     @unique
  publicName String?
  logic      PriceLogic
  minQty     Int?
  maxQty     Int?

  items    ModifierGroupItem[]
  products ProductModifierGroup[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ModifierGroupItem {
  groupId    Int
  productId  Int
  price      Decimal @db.Decimal(14, 2)
  perItemMax Int?

  group   ModifierGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)
  product Product       @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@id([groupId, productId])
}

model ProductModifierGroup {
  productId Int
  groupId   Int

  product Product       @relation(fields: [productId], references: [id], onDelete: Cascade)
  group   ModifierGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@id([productId, groupId])
}

model ProductImage {
  id          Int     @id @default(autoincrement())
  productId   Int     @unique
  product     Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  imageUrl    String
  imagePath   String?
  category    String?
  subcategory String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
